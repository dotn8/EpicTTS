<fluent:MetroWindow x:Class="EpicTTS.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mui="http://firstfloorsoftware.com/ModernUI"
        xmlns:fluent="clr-namespace:Fluent;assembly=Fluent"
        xmlns:converters="clr-namespace:EpicTTS.Converters"
        xmlns:synthesis="clr-namespace:System.Speech.Synthesis;assembly=System.Speech"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:models="clr-namespace:EpicTTS.ViewModels"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:command="http://www.galasoft.ch/mvvmlight"
        Title="EpicTTS" Grid.IsSharedSizeScope="True" Closed="Window_Closed"
        Style="{StaticResource MetroWindowStyle}">
    <fluent:MetroWindow.Resources>
        <DataTemplate DataType="{x:Type models:ExportToFileViewModel}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" Target="{Binding ElementName=FileExportFilePathTextBox}" Margin="0,0,10,0">File:</Label>
                <TextBox Grid.Column="1" Name="FileExportFilePathTextBox" Text="{Binding FilePath.Value}"/>
                <Button Grid.Column="2" Command="{Binding Path=BrowseCommand}" Name="ExportFilePathBrowseButton">...
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseRightButtonDown">
							<command:EventToCommand Command="{Binding ShellContextMenuCommand, Mode=OneWay}"
                                                    CommandParameter="{Binding ElementName=ExportFilePathBrowseButton, Mode=OneWay}"
                                                    MustToggleIsEnabledValue="True" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
            </Grid>
        </DataTemplate>
        <DataTemplate DataType="{x:Type models:ExportToDefaultAudioDeviceViewModel}"/>
        <ControlTemplate x:Key="ListVoiceDataTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="VoiceName" Width="Auto"/>
                    <ColumnDefinition SharedSizeGroup="VoiceAge" Width="Auto"/>
                    <ColumnDefinition SharedSizeGroup="VoiceGender" Width="Auto"/>
                    <ColumnDefinition SharedSizeGroup="VoiceCulture" Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="{Binding Path=VoiceInfo.Name}" Margin="0,0,10,0"/>
                <TextBlock Grid.Column="1" Text="{Binding Path=VoiceInfo.Age}" Margin="0,0,10,0"/>
                <TextBlock Grid.Column="2" Text="{Binding Path=VoiceInfo.Gender}" Margin="0,0,10,0"/>
                <TextBlock Grid.Column="3" Text="{Binding Path=VoiceInfo.Culture.DisplayName}"/>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="SingleVoiceDataTemplate">
            <StackPanel Orientation="Vertical" Margin="10">
                <TextBlock Text="{Binding Path=VoiceInfo.Name}"/>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding Path=VoiceInfo.Age}" Margin="0,0,10,0"/>
                    <TextBlock Text="{Binding Path=VoiceInfo.Gender}" Margin="0,0,10,0"/>
                    <TextBlock Text="{Binding Path=VoiceInfo.Culture.DisplayName}"/>
                </StackPanel>
            </StackPanel>
        </ControlTemplate>
        <DataTemplate x:Key="VoiceComboBoxDataTemplate">
            <Control x:Name="theControl" Focusable="False" Template="{StaticResource ListVoiceDataTemplate}" />
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=IsSelected.Value}" Value="{x:Null}">
                    <Setter TargetName="theControl" Property="Template" Value="{StaticResource SingleVoiceDataTemplate}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
        <converters:DictionaryConverter x:Key="PauseEnabledStateConverter">
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Ready}">False</system:Boolean>
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Speaking}">True</system:Boolean>
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Paused}">False</system:Boolean>
        </converters:DictionaryConverter>
        <converters:DictionaryConverter x:Key="PlayEnabledStateConverter">
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Ready}">True</system:Boolean>
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Speaking}">False</system:Boolean>
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Paused}">True</system:Boolean>
        </converters:DictionaryConverter>
        <converters:DictionaryConverter x:Key="StopEnabledStateConverter">
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Ready}">False</system:Boolean>
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Speaking}">True</system:Boolean>
            <system:Boolean x:Key="{x:Static synthesis:SynthesizerState.Paused}">True</system:Boolean>
        </converters:DictionaryConverter>
    </fluent:MetroWindow.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <fluent:Ribbon CanCustomizeRibbon="False" CanCustomizeQuickAccessToolBar="False" CanQuickAccessLocationChanging="False" AutomaticStateManagement="False" IsQuickAccessToolBarVisible="False">

            <fluent:RibbonTabItem ReduceOrder="Input,Voice,Playback,FileOutput" Header="Home">

                <!--You can set short form (for ex, "Middle" is equal "Middle,Middle,Middle")-->
                <fluent:RibbonGroupBox Name="Input" Header="Input">
                    <StackPanel Orientation="Vertical">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0" Target="{Binding ElementName=ImportFilePathTextBox}" Margin="0,0,10,0">File:</Label>
                            <TextBox Grid.Column="1" Name="ImportFilePathTextBox" Text="{Binding Document.FilePath.Value}"/>
                            <Button Grid.Column="2" Command="{Binding Path=Document.BrowseCommand}" Name="DocumentBrowseButton">...
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseRightButtonDown">
                                        <command:EventToCommand Command="{Binding Document.ShowContextMenuCommand, Mode=OneWay}"
                                                    CommandParameter="{Binding ElementName=DocumentBrowseButton, Mode=OneWay}"
                                                    MustToggleIsEnabledValue="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </Grid>
                    </StackPanel>
                </fluent:RibbonGroupBox>

                <!--By default ReduceOrder="Large, Middle, Small"-->
                <fluent:RibbonGroupBox Name="Voice" Header="Voice" MinWidth="200">
                    <ComboBox x:Name="VoiceComboBox" ItemsSource="{Binding Path=Voices}" MinWidth="150" Margin="5"
                              SelectedItem="{Binding Path=SelectedVoice}" ItemTemplate="{StaticResource VoiceComboBoxDataTemplate}"/>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Name="Playback" Header="Playback">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <Label Target="{Binding ElementName=StateTextBlock}" Margin="0,0,10,0">State:</Label>
                            <TextBlock Name="StateTextBlock" Text="{Binding Path=State}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Button FontFamily="./resources/#FontAwesome" FontSize="24" Content="&#xf04d;" Command="{Binding Path=StopSpeakingCommand}" IsEnabled="{Binding Path=State, Converter={StaticResource StopEnabledStateConverter}}"/>
                            <Button FontFamily="./resources/#FontAwesome" FontSize="24" Content="&#xf04b;" Command="{Binding Path=SpeakCommand}" IsEnabled="{Binding Path=State, Converter={StaticResource PlayEnabledStateConverter}}"/>
                            <Button FontFamily="./resources/#FontAwesome" FontSize="24" Content="&#xf04c;" Command="{Binding Path=PauseSpeakingCommand}" IsEnabled="{Binding Path=State, Converter={StaticResource PauseEnabledStateConverter}}"/>
                        </StackPanel>
                    </StackPanel>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Name="Output" Header="Output">
                    <StackPanel Orientation="Vertical">
                        <ComboBox x:Name="ExportComboBox" ItemsSource="{Binding Path=Exports}" MinWidth="150" Margin="5"
                              SelectedItem="{Binding Path=SelectedExport}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Path=Description.Value}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <ContentControl Content="{Binding Path=SelectedExport}"/>
                    </StackPanel>
                </fluent:RibbonGroupBox>

            </fluent:RibbonTabItem>
        </fluent:Ribbon>
        <TextBox Grid.Row="1" Text="{Binding Path=Document.Text.Value, UpdateSourceTrigger=PropertyChanged}"/>
    </Grid>
</fluent:MetroWindow>
